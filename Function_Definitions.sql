/*UTILIZE THIS FUNCTION WITH THE FOLLOWING STATEMENT:
    SELECT USER_LOGIN('USERNAME','PASSWORD');
  A RETURN OF TRUE MEANS THAT THE USER HAS BEEN AUTHENTICATED.
*/
CREATE OR REPLACE FUNCTION
  USER_LOGIN(
    IN P_USERNAME VARCHAR,
    IN P_PASSWORD VARCHAR,
    OUT P_USER_ALLOWED BOOLEAN
  )
  LANGUAGE PLPGSQL STABLE
  SECURITY DEFINER
AS $USER_LOGIN$
  BEGIN
    SELECT INTO
      P_USER_ALLOWED
      CASE WHEN (P.USERNAME IS NOT NULL AND P.PASSWORD IS NOT NULL)
        THEN TRUE
        ELSE FALSE
      END AS USER_ALLOWED
    FROM
      PUBLIC.PROFESSOR P
      INNER JOIN PUBLIC.ACCESS A ON
        A.ID = P.ACCESS_ID
      INNER JOIN PUBLIC.ROLE R ON
        R.ID = P.ROLE_ID
    WHERE
      P.USERNAME = P_USERNAME AND
      P.PASSWORD = PUBLIC.CRYPT(P_PASSWORD, P.PASSWORD);
  END;
$USER_LOGIN$;

CREATE OR REPLACE FUNCTION
  LOG_PROFESSOR_UPDATE()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL VOLATILE
AS $PROFESSOR_UPDATE_STAMPS$
  BEGIN
    IF
      OLD.PASSWORD IS DISTINCT FROM NEW.PASSWORD
    THEN
      NEW.PASSWORDUPDATEDON := NOW();
    END IF;
    NEW.LASTUPDATEON := NOW();
    RETURN NEW;
  END;
$PROFESSOR_UPDATE_STAMPS$;

CREATE TRIGGER TRIGGER_PROFESSOR_UPDATE
  BEFORE UPDATE ON
    PROFESSOR
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_PROFESSOR_UPDATE();

CREATE OR REPLACE FUNCTION
  LOG_PROFESSOR_INSERT()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL VOLATILE
AS $PROFESSOR_INSERT_STAMPS$
  BEGIN
    NEW.PASSWORDUPDATEDON := NOW();
    NEW.CREATEDON:= NOW();
    NEW.LASTUPDATEON := NOW();
    NEW.ACTIVE := 1;
    RETURN NEW;
  END;
$PROFESSOR_INSERT_STAMPS$;

CREATE TRIGGER TRIGGER_PROFESSOR_INSERT
  BEFORE INSERT ON
    PROFESSOR
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_PROFESSOR_INSERT();

CREATE OR REPLACE FUNCTION
  LOG_UPDATE_STAMPS()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL VOLATILE
AS $LOG_UPDATE_STAMPS$
  BEGIN
    NEW.LASTUPDATEON := NOW();
    RETURN NEW;
  END;
$LOG_UPDATE_STAMPS$;

CREATE TRIGGER TRIGGER_UPDATE
  BEFORE UPDATE ON
    ROLE
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_UPDATE_STAMPS();

--INSERT TRIGGER & FUNCTION
CREATE OR REPLACE FUNCTION
  LOG_INSERT_STAMPS()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL VOLATILE
AS $LOG_INSERT_STAMPS$
  BEGIN
    NEW.CREATEDON:= NOW();
    NEW.LASTUPDATEON := NOW();
    NEW.ACTIVE := 1;
    RETURN NEW;
  END;
$LOG_INSERT_STAMPS$;

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    ROLE
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();

CREATE TRIGGER TRIGGER_INSERT
  BEFORE INSERT ON
    ACCESS
  FOR EACH ROW
    EXECUTE PROCEDURE LOG_INSERT_STAMPS();
